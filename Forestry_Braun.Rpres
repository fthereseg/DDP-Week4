```{r setup, include=FALSE}
require(knitr)
require(data.table)
require(plyr)
require(dplyr)
require(tidyr)
opts_chunk$set(cache=TRUE)
knitr::opts_chunk$set(error = TRUE)
```


Forestry Analytics - Reproducible Pitch for Shiny Application
========================================================
author: Faylene Gilles
date: March 27th, 2019
transition: rotate
width: 1920
height: 1080

Summary
========================================================

This Assignment is part of Developing Data Products Course by Coursera. The goal is to make Shiny Application and Reproducible Pitch.

This application has applied value for Marketing Department of my employer company (forestry industry).

Web application was made using R and Shiny framework and could be accessed here:
https://fthereseg.shinyapps.io/Forestry_Analytics/ (please, wait for 1-2 munites while data is being downloaded).

Source code files are available on the GitHub: https://github.com/fthereseg/DDP-Week4

The application consists of 3 files: 
- ui.R (user Interface);
- server.R (back end);
- global.R (pre-precessing of loaded database and defining global objects for 'ui.R' and 'server.R').

Description of application
========================================================
<small>This application uses statistical data on Forestry Production and Trade, sourced from the web-repository of Food and Agriculture Organization of the United Nations: http://www.fao.org/faostat/en/#data/FO.

The main purpose of this application is to provide additional information which is unavailable on FAO Stat web-site.
Source dataframe has about 1.9mln rows and 9 variables (columns). The size of source CSV file is about 220Mb.</small>

There are 8 useful variables in source bulk dataframe:<small>  
1. Country / Group of countries (Area);  
2. Product / Group of products (Item);  
3. Year;  
4. Export Quantity (could be either 'm3' or 'ton');  
5. Export Value (USD);  
6. Import Quantity (could be either 'm3' or 'ton');  
7. Import Value (USD);  
8. Production Quantity (could be either 'm3' or 'ton')</small>  

***
Based on these variables we created 3 derivative ones:<small>  

9. Export Prices (= Export Value / Export Quantity);  
10. Import Prices (= Import Value / Import Quantity);  
11. Internal Consumption (= Production Quantity + Import Quantity - Export Quantity).  

Selecting country, product and time period, user can analyze dynamics of avarage prices in a single given country on interactive plot (**Tab: Dynamics of avarage prices in a country**).

Selecting country, product and time period, user can analyze dynamics of internal consuption in a single given country on interactive plot (**Tab: Dynamics of internal consuption in a country**).

Selecting year and product, user can analyze distribution of prices by all countries on interactive plot (**Tab: Avarage prices by countries**).</small>

Pre-processing calculations
========================================================
left: 50%
<small>Though, backend manipulations are conducted in both **'server.R'** and **'global.R'**, due to number of slides limit we provide only part of **'global.R'** contents.  
**'global.R'** is responsible for loading raw data, cleaning, transposing and creating global objects which are used in **server.R** and in **'ui.R'** as inputs.  
Source FAO Stat dataframe is not suitable for analysis. One of many problems is that the main column **Element** consists of 5 factors which should be transposed to saparate columns.</small>
```{r, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE, results='hide'}
# Defining unnecessary columns
colClasses <- c("Area Code" = "NULL", "Item Code" = "NULL", "Element Code" = "NULL", "Year Code" = "NULL", "Flag" = "NULL")
#Downloading database
temp <- tempfile()
download.file("http://fenixservices.fao.org/faostat/static/bulkdownloads/Forestry_E_All_Data_(Normalized).zip",temp)
forestry <- fread(unzip(temp, files = "Forestry_E_All_Data_(Normalized).csv"), header = TRUE, nrows = 1900000, colClasses = colClasses, fill = TRUE)
```
```{r, echo=FALSE, results='asis', size='tiny'}
data.frame(variable = names(forestry),
            classe = sapply(forestry, typeof),
            first_values = sapply(forestry, function(x) paste0(head(x),  collapse = ", ")),
            row.names = NULL) %>% 
     kable()
```

***
<small>We use function **spread** to make 5 saparate columns from one **Element**:</small>
```{r, echo=TRUE, size='tiny'}
forestry <- spread(forestry, key = Element, value = Value, fill = 0)
```

<small>Now we have more effective data structure:</small>
```{r, echo=FALSE, results='asis', size='tiny'}
data.frame(variable = names(forestry),
            classe = sapply(forestry, typeof),
            first_values = sapply(forestry, function(x) paste0(head(x),  collapse = ", ")),
            row.names = NULL) %>% 
     kable()
```

<small>Except **spread**, we also used **aggregate**, **mutate** and **subset** for tidying this dataftame.</small>


Example of interactive plot
========================================================
<small>There are 3 types of plots available in this web-application. Following is the example of one of them.  
If user selects Canada as a country and Industrial Roundwood as a product, he can analyze dynamics of internal consuption of Industrial Roundwood in Canada on the following graph:</small>
```{r, echo=FALSE}
   knitr::include_graphics('./Plot2.png')
```
